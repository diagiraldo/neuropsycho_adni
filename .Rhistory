tmpdf
tmpdf <- data.frame(X = paste(c("mean", "std"), tolower(varn)))
tmpdf <- unname(cbind(tmpdf, t(tmp[,2:3])))
rownames(tmpdf) <- NULL
colnames(tmpdf) <- c("X", levels(MCICN$GR))
sdes <- rbind(sdes, tmpdf)
sdes
x = c("X", levels(MCICN$GR))
sdes <- data.frame(matrix(ncol = length(x), nrow = 1))
colnames(sdes) <- x
sdes$X[1] <- "female percentage"
tab <- with(MCICN, table(PTGENDER,GR))
sdes[1, 2:ncol(sdes)] <- round(tab[1,]/colSums(tab)*100, digits = 2)
for(varn in c("AGE", namesfac)){
fmla <- as.formula(paste(varn, "GR", sep = " ~ "))
tmp <- MCICN %>%
group_by(GR) %>%
summarise(mean = mean(!!sym(varn)), sd = sd(!!sym(varn)))
tmpdf <- data.frame(X = paste(c("mean", "std"), tolower(varn)))
tmpdf <- cbind(tmpdf, t(round(tmp[,2:3], digits = 2)))
rownames(tmpdf) <- NULL
colnames(tmpdf) <- c("X", levels(MCICN$GR))
sdes <- rbind(sdes, tmpdf)
}
sdes
fmla
res.aov <- aov(fmla, data = tmp)
res.aov <- aov(fmla, data = MCICN)
?aov
TukeyHSD(res.aov)
write.table(sdes, file = "results/description_MCIsubgroups_k4.csv", sep = ",", row.names = FALSE)
varn <- namesfac[1]
fmla <- as.formula(paste(varn, "GR", sep = " ~ "))
sgr <- c("CN", "MCI 2")
tmp <- filter(MCICN, GR %in% sgr)
N <- nrow(tmp)
MW1 <- wilcox.test(fmla, tmp)
Z = qnorm(MW1$p.value/2)
r = abs(Z)/sqrt(N)
round(r, 2)
varn <- namesfac[1]
fmla <- as.formula(paste(varn, "GR", sep = " ~ "))
sgr <- c("MCI 1", "MCI 2")
tmp <- filter(MCICN, GR %in% sgr)
N <- nrow(tmp)
MW1 <- wilcox.test(fmla, tmp)
Z = qnorm(MW1$p.value/2)
r = abs(Z)/sqrt(N)
round(r, 2)
MW1$p.value*60
fmla
round(MW1$p.value*60, 9)
?surv_fit
?Surv
surv_object <- Surv(time = B$time, event = B$event)
fitsv <- survfit(surv_object ~ GR, data = B)
?survfit
pl <- survival.plot(fitsv, B, k = k_clust)
pl
source("scripts/plot_functions.R")
pl <- survival.plot(fitsv, B, k = k_clust)
pl
?ggsurvplot
# Kaplan-Meier curves
pl <- survival.plot(fitsv, B, k = k_clust)
pl
ggsave("plots/KMcurves_MCIsubgroups_k4.png", pl, width = 12, height = 10, units = "cm", dpi = 300, bg = "transparent")
ggsave("plots/KMcurves_MCIsubgroups_k4.eps", pl, width = 12, height = 10, units = "cm", dpi = 300, bg = "transparent")
?coxph
?ggforest
?survdiff
?pairwise_survdiff
fit.coxph <- coxph(surv_object ~ GR + PTGENDER + PTEDUCAT + AGE, data = B)
ggforest(fit.coxph, data = B)
survdiff(surv_object ~ GR, data = B)
pairwise_survdiff(Surv(time, event) ~ GR, data = B, p.adjust.method = "fdr")
fit.coxph
meds
meds <- mutate(meds, GR = paste("MCI", c(1, 4, 2, 3)))
meds
meds <- meds[, c(5,1:4)]
rm(list = ls())
load("results/cfa_parameters.RData")
load("processed_data/neuropsycho_seltests.RData")
sel_tests <- c("ADAS", "MMSE", "MOCA", "AVLT")
tot_tests <- unname(unlist(seltotals[sel_tests]))
tot_tests
sel_tests <- c("ADAS", "MMSE", "MOCA", "CDR")
tot_tests <- unname(unlist(seltotals[sel_tests]))
S <- merge(S, dplyr::select(DF, c(1:5, tot)), all.x = TRUE)
rm(DF, selitems, seltotals)
# Load data
load("processed_data/domain_scores_srb_firstvisit.RData")
# Load test totals for baseline
load("processed_data/neuropsycho_seltests.RData")
sel_tests <- c("ADAS", "MMSE", "MOCA", "CDR")
tot_tests <- unname(unlist(seltotals[sel_tests]))
S <- merge(S, dplyr::select(DF, c(1:5, tot)), all.x = TRUE)
rm(DF, selitems, seltotals)
# Load test totals for baseline
load("processed_data/neuropsycho_seltests.RData")
sel_tests <- c("ADAS", "MMSE", "MOCA", "CDR")
tot_tests <- unname(unlist(seltotals[sel_tests]))
S <- merge(S, dplyr::select(DF, c(1:5, tot_tests)), all.x = TRUE)
rm(DF, selitems, seltotals)
cv <- c("stableMCI", "converterMCI")
seltw <- seq(12,60,12)
trsplit <- 0.7
k_iter <- 1000
sampsize <- data.frame(tw = seltw, stable = numeric(length(seltw)), converter = numeric(length(seltw)))
results <- data.frame(time = rep(seltw, each = k_iter), iter = rep(1:k_iter, length(seltw)),
auc_fac = numeric(length(seltw)*k_iter), auc_tot = numeric(length(seltw)*k_iter))
impo <- data.frame(time = rep(seltw, each = length(namesfac) + 3),
namevar = character((length(namesfac) + 3)*length(seltw)), sumimpo = numeric((length(namesfac) + 3)*length(seltw)))
tot <- tot_tests[1:3,5]
# Select totals and CDR SOB
tot <- tot_tests[c(1:3, 5)]
cv <- c("stableMCI", "converterMCI")
seltw <- seq(12,60,12)
trsplit <- 0.7
k_iter <- 1000
sampsize <- data.frame(tw = seltw, stable = numeric(length(seltw)), converter = numeric(length(seltw)))
results <- data.frame(time = rep(seltw, each = k_iter), iter = rep(1:k_iter, length(seltw)),
auc_fac = numeric(length(seltw)*k_iter), auc_tot = numeric(length(seltw)*k_iter))
impo <- data.frame(time = rep(seltw, each = length(namesfac) + 3),
namevar = character((length(namesfac) + 3)*length(seltw)), sumimpo = numeric((length(namesfac) + 3)*length(seltw)))
for (i in 1:length(seltw)){
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
for (k in 1:k_iter){
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
auctot = performance(pred, "auc")@y.values[[1]]
results$auc_fac[results$time == tw & results$iter == k] <- aucfac
results$auc_tot[results$time == tw & results$iter == k] <- auctot
}
impo$sumimpo[impo$time == tw] <- tmp_impo
}
impo$namevar <- rep(as.character(names(tmp_impo)), times = length(seltw))
impo <- dcast(impo, namevar ~ time, value.var = "sumimpo") %>%
slice(match(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), namevar))
impo[, 2:6] <- sweep(impo[, 2:6], 2, colSums(impo[, 2:6]), '/')
impo[, 2:6] <- round(impo[, 2:6]*100, digits = 1)
apply(impo, 1, function(x) paste(x, collapse = "$ & $"))
# Load test totals for baseline
load("processed_data/neuropsycho_seltests.RData")
sel_tests <- c("ADAS", "MMSE", "MOCA", "CDR")
tot_tests <- unname(unlist(seltotals[sel_tests]))
S <- merge(S, dplyr::select(DF, c(1:5, tot_tests)), all.x = TRUE)
rm(DF, selitems, seltotals)
# Select totals and CDR SOB
tot <- tot_tests[c(1:3, 5)]
B <- filter(S, set == "EVAL")
#############################
# Classification experiments
#############################
cv <- c("stableMCI", "converterMCI")
seltw <- seq(12,60,12)
trsplit <- 0.7
k_iter <- 1000
sampsize <- data.frame(tw = seltw, stable = numeric(length(seltw)), converter = numeric(length(seltw)))
results <- data.frame(time = rep(seltw, each = k_iter), iter = rep(1:k_iter, length(seltw)),
auc_fac = numeric(length(seltw)*k_iter), auc_tot = numeric(length(seltw)*k_iter))
impo <- data.frame(time = rep(seltw, each = length(namesfac) + 3),
namevar = character((length(namesfac) + 3)*length(seltw)), sumimpo = numeric((length(namesfac) + 3)*length(seltw)))
for (i in 1:length(seltw)){
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
for (k in 1:k_iter){
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
auctot = performance(pred, "auc")@y.values[[1]]
results$auc_fac[results$time == tw & results$iter == k] <- aucfac
results$auc_tot[results$time == tw & results$iter == k] <- auctot
}
impo$sumimpo[impo$time == tw] <- tmp_impo
}
impo$namevar <- rep(as.character(names(tmp_impo)), times = length(seltw))
impo <- dcast(impo, namevar ~ time, value.var = "sumimpo") %>%
slice(match(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), namevar))
impo[, 2:6] <- sweep(impo[, 2:6], 2, colSums(impo[, 2:6]), '/')
impo[, 2:6] <- round(impo[, 2:6]*100, digits = 1)
apply(impo, 1, function(x) paste(x, collapse = "$ & $"))
setwd("~/neuropsycho_adni")
library(dplyr)
library(ggplot2)
library(randomForest)
library(ROCR)
library(reshape2)
for (i in 1:length(seltw)){
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
for (k in 1:k_iter){
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
auctot = performance(pred, "auc")@y.values[[1]]
results$auc_fac[results$time == tw & results$iter == k] <- aucfac
results$auc_tot[results$time == tw & results$iter == k] <- auctot
}
impo$sumimpo[impo$time == tw] <- tmp_impo
}
impo$namevar <- rep(as.character(names(tmp_impo)), times = length(seltw))
impo <- dcast(impo, namevar ~ time, value.var = "sumimpo") %>%
slice(match(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), namevar))
impo[, 2:6] <- sweep(impo[, 2:6], 2, colSums(impo[, 2:6]), '/')
impo[, 2:6] <- round(impo[, 2:6]*100, digits = 1)
apply(impo, 1, function(x) paste(x, collapse = "$ & $"))
sampsize <- data.frame(tw = seltw, stable = numeric(length(seltw)), converter = numeric(length(seltw)))
results <- data.frame(time = rep(seltw, each = k_iter), iter = rep(1:k_iter, length(seltw)),
auc_fac = numeric(length(seltw)*k_iter), auc_tot = numeric(length(seltw)*k_iter))
impo <- data.frame(time = rep(seltw, each = length(namesfac) + 3),
namevar = character((length(namesfac) + 3)*length(seltw)), sumimpo = numeric((length(namesfac) + 3)*length(seltw)))
for (i in 1:length(seltw)){
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
for (k in 1:k_iter){
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
auctot = performance(pred, "auc")@y.values[[1]]
results$auc_fac[results$time == tw & results$iter == k] <- aucfac
results$auc_tot[results$time == tw & results$iter == k] <- auctot
}
impo$sumimpo[impo$time == tw] <- tmp_impo
}
i
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
k
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
summary(B)
filter(B, is.na(CDRSB))
B <- filter(S, set == "EVAL" & !is.na(CDRSB))
cv <- c("stableMCI", "converterMCI")
seltw <- seq(12,60,12)
trsplit <- 0.7
k_iter <- 1000
sampsize <- data.frame(tw = seltw, stable = numeric(length(seltw)), converter = numeric(length(seltw)))
results <- data.frame(time = rep(seltw, each = k_iter), iter = rep(1:k_iter, length(seltw)),
auc_fac = numeric(length(seltw)*k_iter), auc_tot = numeric(length(seltw)*k_iter))
impo <- data.frame(time = rep(seltw, each = length(namesfac) + 3),
namevar = character((length(namesfac) + 3)*length(seltw)), sumimpo = numeric((length(namesfac) + 3)*length(seltw)))
for (i in 1:length(seltw)){
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
for (k in 1:k_iter){
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
auctot = performance(pred, "auc")@y.values[[1]]
results$auc_fac[results$time == tw & results$iter == k] <- aucfac
results$auc_tot[results$time == tw & results$iter == k] <- auctot
}
impo$sumimpo[impo$time == tw] <- tmp_impo
}
impo$namevar <- rep(as.character(names(tmp_impo)), times = length(seltw))
impo <- dcast(impo, namevar ~ time, value.var = "sumimpo") %>%
slice(match(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), namevar))
impo[, 2:6] <- sweep(impo[, 2:6], 2, colSums(impo[, 2:6]), '/')
impo[, 2:6] <- round(impo[, 2:6]*100, digits = 1)
apply(impo, 1, function(x) paste(x, collapse = "$ & $"))
results
head(results)
impo
sampsize
save(results, sampsize, impo, file = "results/AUC_MCIprogression_predction.RData")
m <- melt(results, measure.vars = c("auc_fac", "auc_tot"))
m <- mutate(m, input = factor(variable, levels = c("auc_fac", "auc_tot"), labels = c("Dysfunction Scores", "Test outcomes")),
time = factor(time, levels = seltw, labels = paste(seltw, "months")))
pl <- ggplot(m, aes(time, value, colour = as.factor(input))) + geom_boxplot(outlier.size = 0.5) +
theme_bw() + labs(x = "Time period",y = "AUC value", colour = "RF classifiers\ntrained with: ") +
theme(plot.background = element_rect(fill = "transparent",colour = NA),
legend.position = "top", legend.background = element_rect(fill = "transparent",colour = NA),
legend.margin = ggplot2::margin(0,0,0,0), legend.box.margin = unit(c(0.2,0,0,0), "cm"),
plot.margin = unit(c(0,0,0,0), "cm")) +
geom_hline(yintercept = 0.5, colour="gray40", linetype = "dotted")
pl
load("processed_data/neuropsycho_seltests.RData")
sel_tests <- c("ADAS", "MMSE", "MOCA", "AVLT")
tot_tests <- unname(unlist(seltotals[sel_tests]))
tot_tests
S <- merge(S, dplyr::select(DF, c(1:5, tot_tests)), all.x = TRUE)
rm(DF, selitems, seltotals)
# Select totals and RAVLT-Immediate
tot <- tot_tests[c(1:4)]
B <- filter(S, set == "EVAL" & !is.na(CDRSB))
#############################
# Classification experiments
#############################
cv <- c("stableMCI", "converterMCI")
seltw <- seq(12,60,12)
trsplit <- 0.7
k_iter <- 1000
sampsize <- data.frame(tw = seltw, stable = numeric(length(seltw)), converter = numeric(length(seltw)))
results <- data.frame(time = rep(seltw, each = k_iter), iter = rep(1:k_iter, length(seltw)),
auc_fac = numeric(length(seltw)*k_iter), auc_tot = numeric(length(seltw)*k_iter))
impo <- data.frame(time = rep(seltw, each = length(namesfac) + 3),
namevar = character((length(namesfac) + 3)*length(seltw)), sumimpo = numeric((length(namesfac) + 3)*length(seltw)))
for (i in 1:length(seltw)){
tw <- seltw[i]
tmp <- mutate(B, GR = ifelse((new.is.stable | new.time.change > tw) & new.months.fu >= tw , "stableMCI", NA),
GR = ifelse((new.n.prog > 0 & new.time.change <= tw), "converterMCI", GR)) %>%
filter(!is.na(GR)) %>%
mutate(GR = factor(GR, labels = cv, levels = cv))
sampsize[i, 2:3] <- table(tmp$GR)
urn <- min(table(tmp$GR))
urc <- names(table(tmp$GR))[which.min(table(tmp$GR))]
tmp_impo <- vector("numeric", length = length(namesfac) + 3)
for (k in 1:k_iter){
set.seed(1987 + tw + k)
setTRAIN <- c(sample(tmp$RID[tmp$GR == urc], size = round(urn*trsplit)),
sample(tmp$RID[tmp$GR %in% setdiff(cv, urc)], size = round(urn*trsplit)))
setTEST <- setdiff(tmp$RID, setTRAIN)
idxTRAIN <- which(tmp$RID %in% setTRAIN)
idxTEST <- which(tmp$RID %in% setTEST)
fmlafac <- as.formula(paste("GR", paste(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlafac, data = tmp, subset = idxTRAIN, importance = TRUE)
tmp_impo <- tmp_impo + rf$importance[,3]
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
aucfac = performance(pred, "auc")@y.values[[1]]
fmlatot <- as.formula(paste("GR", paste(c(tot, "PTEDUCAT", "PTGENDER", "AGE"), collapse = " + "), sep = " ~ "))
rf <- randomForest(fmlatot, data = tmp, subset = idxTRAIN)
pred_prob <- predict(rf, tmp[idxTEST,], type = "prob")[, "converterMCI"]
pred <- prediction(pred_prob, tmp$GR[idxTEST], label.ordering = cv)
auctot = performance(pred, "auc")@y.values[[1]]
results$auc_fac[results$time == tw & results$iter == k] <- aucfac
results$auc_tot[results$time == tw & results$iter == k] <- auctot
}
impo$sumimpo[impo$time == tw] <- tmp_impo
}
impo$namevar <- rep(as.character(names(tmp_impo)), times = length(seltw))
impo <- dcast(impo, namevar ~ time, value.var = "sumimpo") %>%
slice(match(c(namesfac, "PTEDUCAT", "PTGENDER", "AGE"), namevar))
impo[, 2:6] <- sweep(impo[, 2:6], 2, colSums(impo[, 2:6]), '/')
impo[, 2:6] <- round(impo[, 2:6]*100, digits = 1)
apply(impo, 1, function(x) paste(x, collapse = "$ & $"))
m <- melt(results, measure.vars = c("auc_fac", "auc_tot"))
m <- mutate(m, input = factor(variable, levels = c("auc_fac", "auc_tot"), labels = c("Dysfunction Scores", "Test outcomes")),
time = factor(time, levels = seltw, labels = paste(seltw, "months")))
pl <- ggplot(m, aes(time, value, colour = as.factor(input))) + geom_boxplot(outlier.size = 0.5) +
theme_bw() + labs(x = "Time period",y = "AUC value", colour = "RF classifiers\ntrained with: ") +
theme(plot.background = element_rect(fill = "transparent",colour = NA),
legend.position = "top", legend.background = element_rect(fill = "transparent",colour = NA),
legend.margin = ggplot2::margin(0,0,0,0), legend.box.margin = unit(c(0.2,0,0,0), "cm"),
plot.margin = unit(c(0,0,0,0), "cm")) +
geom_hline(yintercept = 0.5, colour="gray40", linetype = "dotted")
pl
save(results, sampsize, impo, file = "results/AUC_MCIprogression_predction.RData")
m <- melt(results, measure.vars = c("auc_fac", "auc_tot"))
m <- mutate(m, input = factor(variable, levels = c("auc_fac", "auc_tot"), labels = c("Dysfunction Scores", "Test outcomes")),
time = factor(time, levels = seltw, labels = paste(seltw, "months")))
pl <- ggplot(m, aes(time, value, colour = as.factor(input))) + geom_boxplot(outlier.size = 0.5) +
theme_bw() + labs(x = "Time period",y = "AUC value", colour = "RF classifiers\ntrained with: ") +
theme(plot.background = element_rect(fill = "transparent",colour = NA),
legend.position = "top", legend.background = element_rect(fill = "transparent",colour = NA),
legend.margin = ggplot2::margin(0,0,0,0), legend.box.margin = unit(c(0.2,0,0,0), "cm"),
plot.margin = unit(c(0,0,0,0), "cm")) +
geom_hline(yintercept = 0.5, colour="gray40", linetype = "dotted")
pl
m <- melt(results, measure.vars = c("auc_fac", "auc_tot"))
m <- mutate(m, input = factor(variable, levels = c("auc_fac", "auc_tot"), labels = c("Domain Scores", "Other outcomes")),
time = factor(time, levels = seltw, labels = paste(seltw, "months")))
pl <- ggplot(m, aes(time, value, colour = as.factor(input))) + geom_boxplot(outlier.size = 0.5) +
theme_bw() + labs(x = "Time period",y = "AUC value", colour = "RF classifiers\ntrained with: ") +
theme(plot.background = element_rect(fill = "transparent",colour = NA),
legend.position = "top", legend.background = element_rect(fill = "transparent",colour = NA),
legend.margin = ggplot2::margin(0,0,0,0), legend.box.margin = unit(c(0.2,0,0,0), "cm"),
plot.margin = unit(c(0,0,0,0), "cm")) +
geom_hline(yintercept = 0.5, colour="gray40", linetype = "dotted")
pl
ggsave("plots/RFauc_boxplot.png", pl, width = 16, height = 12, units = "cm", dpi = 300, bg = "transparent")
ggsave("plots/RFauc_boxplot.eps", pl, width = 16, height = 12, units = "cm", dpi = 300, bg = "transparent")
tmp <- filter(results, time == 12)
tt1 <- with(tmp, t.test(auc_fac, auc_tot))
tt1
d <- (tt1$estimate[1] - tt1$estimate[2])/sqrt((var(tmp$auc_fac) + var(tmp$auc_tot))/2)
d
tmp <- filter(results, time == 60)
tt1 <- with(tmp, t.test(auc_fac, auc_tot))
d <- (tt1$estimate[1] - tt1$estimate[2])/sqrt((var(tmp$auc_fac) + var(tmp$auc_tot))/2)
tt1
d
